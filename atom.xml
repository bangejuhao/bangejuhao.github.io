<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chenhuaibo.xyz</id>
    <title>ChenHuaibo&apos;s Blog</title>
    <updated>2020-05-07T08:14:21.534Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chenhuaibo.xyz"/>
    <link rel="self" href="https://chenhuaibo.xyz/atom.xml"/>
    <subtitle>我有无限可能</subtitle>
    <logo>https://chenhuaibo.xyz/images/avatar.png</logo>
    <icon>https://chenhuaibo.xyz/favicon.ico</icon>
    <rights>All rights reserved 2020, ChenHuaibo&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[利用腾讯云函数SCF实现WPS自动打卡]]></title>
        <id>https://chenhuaibo.xyz/post/li-yong-teng-xun-yun-han-shu-scf-shi-xian-wps-zi-dong-da-qia/</id>
        <link href="https://chenhuaibo.xyz/post/li-yong-teng-xun-yun-han-shu-scf-shi-xian-wps-zi-dong-da-qia/">
        </link>
        <updated>2020-05-06T13:34:49.000Z</updated>
        <summary type="html"><![CDATA[<p>随着手机里面功能越来越丰富，让我们使用起来越来越方便了，给我们的生活带来了极大的便利。本文利用腾讯云函数SCF实现WPS自动打卡获得会员功能</p>
]]></summary>
        <content type="html"><![CDATA[<p>随着手机里面功能越来越丰富，让我们使用起来越来越方便了，给我们的生活带来了极大的便利。本文利用腾讯云函数SCF实现WPS自动打卡获得会员功能</p>
<!-- more -->
<h2>1.获取WPSSID的cookie</h2>
<p>网页登录WPS打卡界面<a href='https://zt.wps.cn/2018/clock_in?csource=pc_clock_oldactivity'>https://zt.wps.cn/2018/clock_in?csource=pc_clock_oldactivity</a><br>
登录之后，点击用户名进入会员中心<br>
<img src="https://chenhuaibo.xyz/post-images/1588772267455.png" alt="" loading="lazy"><br>
在会员中心界面按下F12打开控制台，选择网络（network），然后刷新一下网页，找到如图所示的元素，并复制wps_sid<br>
<img src="https://chenhuaibo.xyz/post-images/1588772587816.png" alt="" loading="lazy"></p>
<h2>2.设置腾讯云函数SCF</h2>
下载该代码：<a href='https://bangejvhao.lanzous.com/icbyw0j'>https://bangejvhao.lanzous.com/icbyw0j</a>
<p>登录腾讯云函数SCF：<a href='https://cloud.tencent.com/product/scf'>https://cloud.tencent.com/product/scf</a><br>
实名认证之后，进入腾讯云函数SCF<br>
选择函数服务，单击新建<br>
<img src="https://chenhuaibo.xyz/post-images/1588772824743.png" alt="" loading="lazy"><br>
函数名称自己设置即可，运行环境选择Nodejs 8.9，创建方式选择空白函数，然后单击下一步<br>
<img src="https://chenhuaibo.xyz/post-images/1588772937206.png" alt="" loading="lazy"><br>
提交方法选择本地上传zip包，并上传刚刚下载的代码，然后单击完成<br>
<img src="https://chenhuaibo.xyz/post-images/1588773077598.png" alt="" loading="lazy"><br>
选择函数代码，将第一步获取的wps_sid填入sid，wpsinviteid填1，sckey中的填写内容进入<a href='http://sc.ftqq.com/3.version'>http://sc.ftqq.com/3.version</a> 根据步骤生成并填入（科学上网），然后单击保存<br>
<img src="https://chenhuaibo.xyz/post-images/1588773349905.png" alt="" loading="lazy"></p>
<h2>3.设置定时任务</h2>
单击触发管理，单击创建触发器
<p><img src="https://chenhuaibo.xyz/post-images/1588773458283.png" alt="" loading="lazy"><br>
触发方式选择定时触发，定时任务名称自己设置即可，触发周期选择自定义触发周期，corn表达式输入“0 0 6 * * * *”，最后单击提交。</p>
<p><img src="https://chenhuaibo.xyz/post-images/1588773903451.png" alt="" loading="lazy"><br>
大功告成，WPS自动打卡就这样设置成功了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github pages 绑定个人域名]]></title>
        <id>https://chenhuaibo.xyz/post/github-pages-bang-ding-ge-ren-yu-ming/</id>
        <link href="https://chenhuaibo.xyz/post/github-pages-bang-ding-ge-ren-yu-ming/">
        </link>
        <updated>2020-03-22T04:32:33.000Z</updated>
        <summary type="html"><![CDATA[<h3>前言</h3>
近日搭建了自己的 Blog，并且将代码托管在了Github上。众所周知，Github pages的域名都是统一的yourName.github.io。那么，如何将Github pages绑定在自己的域名上呢？
]]></summary>
        <content type="html"><![CDATA[<h3>前言</h3>
近日搭建了自己的 Blog，并且将代码托管在了Github上。众所周知，Github pages的域名都是统一的yourName.github.io。那么，如何将Github pages绑定在自己的域名上呢？
<!-- more -->
<h3>需要</h3>
1.个人的Github pages<br>
2.个人域名
<h3>1.域名解析配置</h3>
将域名和IP或其他域名进行绑定，让你能通过不同域名访问同一个网站。首先在自己的域名控制台找到域名管理，选择域名解析功能。记录类型选择 A记录 或者 CNAME 就可以了。接下里就是域名解析的几个要点：<br>
1.A记录类型记录值填写 IP 值，两种选择：<br>
①你的github.io的IP值<br>
②在官方提供的两个IP中选择192.30.252.153或192.30.252.154<br>
2.CNAME类型，请选好主机记录，按主机记录类型填写记录值。推荐选择@，那么记录值就填写按自己的github名填写yourName.github.io就好了<br>
<h3>2.Github pages中CNAME文件的配置</h3>
有两种方法：<br>
1.在Github的Github pages的仓库根目录里加上CNAME文件，里面写上个人域名即可。我的是：chenhuaibo.xyz<br>
2.在github.io仓库中的Settings的GitHub Pages项直接设置Custom domain，Github会自动添加CNAME文件<br>
<img src="https://chenhuaibo.xyz/post-images/1584855504065.png">
<h3>3.为什么配置了域名解析还要配置CNAME文件呢？</h3>
实际上，个人域名是名字，Github pages相当于网站空间。试想，如果不在网站空间配置CNAME，就可以成功绑定域名，那么岂不是可以给别随便一个的网站绑定上自己的域名？相同，如果只需配置Github pages的CNAME，而不用域名解析，那不是也可以将自己的网站绑在别人的域名上？<br>
所以，域名绑定是需要“双方同意”的。]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BAT，谁让你「托管」我浏览器的？]]></title>
        <id>https://chenhuaibo.xyz/post/batshui-rang-ni-tuo-guan-wo-liu-lan-qi-de/</id>
        <link href="https://chenhuaibo.xyz/post/batshui-rang-ni-tuo-guan-wo-liu-lan-qi-de/">
        </link>
        <updated>2019-11-21T15:44:35.000Z</updated>
        <summary type="html"><![CDATA[<p>移动互联网时代，浏览器的功能已经被各大 App 给分散化了。但是在桌面端，尤其是 PC 上浏览器还是一个很重要的信息入口。显然厂商们也知道这个道理，因此浏览器也成为了被「流氓」的重要阵地。<br>
今天，有网友爆料称显示目前市面上占有率最高的 Chrome 也出现了服务被劫持的时间，而这次疑似耍流氓的还是我们日常生活中离不开的阿里。</p>
]]></summary>
        <content type="html"><![CDATA[<p>移动互联网时代，浏览器的功能已经被各大 App 给分散化了。但是在桌面端，尤其是 PC 上浏览器还是一个很重要的信息入口。显然厂商们也知道这个道理，因此浏览器也成为了被「流氓」的重要阵地。<br>
今天，有网友爆料称显示目前市面上占有率最高的 Chrome 也出现了服务被劫持的时间，而这次疑似耍流氓的还是我们日常生活中离不开的阿里。</p>
<!-- more -->
<center><h2>你网上的一举一动  他们想知道就知道</h2></center>
微博用户 @極楽亭 表示自己的 Chrome 在自己不知情的情况下被阿里巴巴的一个插件「托管」了。更重要的是，这个托管功能可以被远程随意修改浏览器设置、安装任意应用，并且可以监控用户在浏览器上的一举一动。
<figure data-type="image" tabindex="1"><img src="https://chenhuaibo.xyz/post-images/1574352268092.png" alt="" loading="lazy"></figure>
<p>评论区中，网友 @杜王町天气预报 表示自己的 Chrome 也被托管了，但是托管的对象从阿里变成了腾讯。</p>
<figure data-type="image" tabindex="2"><img src="https://chenhuaibo.xyz/post-images/1574352278399.png" alt="" loading="lazy"></figure>
<p>还有网友 @AO1IIIII1IIIIII 表示自己的浏览器疑似被百度劫持了……这样 BAT 三家齐聚评论区，除此之外，迅雷也是榜上有名。</p>
<figure data-type="image" tabindex="3"><img src="https://chenhuaibo.xyz/post-images/1574352284562.png" alt="" loading="lazy"></figure>
<p>目前来看，这个托管插件能够实现相当多的内容，并且在 Chrome 中的权限相当高：可以监控被托管的 Chrome 托管期间的全部浏览记录、安装拓展和应用、封禁 Chrome 中的任意功能……最重要的是，这个托管插件似乎可以改 Chrome 证书，这对个人用户的安全是个很大的威胁。</p>
<p>科技媒体「饭否君」表示，这个托管插件可能是「阿里程序员为了便于登陆阿里系绕过了某些功能来实现快速登陆（猜测），以前都是无缝衔接的使用，但是这次Chrome更新后让这个快捷路径暴露出来。」<br>
这条消息爆出来之后我也自查了一下我的电脑，发现家里的电脑也中招了，「托管」方是腾讯。建议大家查一下，从微博上的反馈来看中招比例相当高。</p>
<figure data-type="image" tabindex="4"><img src="https://chenhuaibo.xyz/post-images/1574352369316.png" alt="" loading="lazy"></figure>
<center><h2>如何取消「被托管」</h2></center>
首先，你要确定你的 Chrome 是最新版的（Windows 平台稳定版版本号应该是 78），这样能才能够看到托管信息。
![](https://chenhuaibo.xyz/post-images/1574352531980.png)
<p>另外我们不建议企业用户执行下列操作，因为这有可能是企业对员工工作内容的监管，贸然删除可能会有麻烦。</p>
<p>接下来大家可以按照这个步骤来查一查自己中没中招：</p>
<p>在 Chrome 地址栏中输入「chrome://flags/#show-managed-ui」，在打开的页面中会看到高亮的「Show managed UI for managed users」，将后面的 Default（默认）修改为 Enabled（开启），这样你就能看到相关提示。如果你是企业用户也可以将这个选项调成 Disabled（关闭）来眼不见心不烦。</p>
<figure data-type="image" tabindex="5"><img src="https://chenhuaibo.xyz/post-images/1574352546410.png" alt="" loading="lazy"></figure>
<p>在 Chrome 右上角三个点的菜单中能够看到相关信息，如果你的电脑被托管了，在最下方会显示「由贵单位管理」；在「设置 - 关于 Chrome」页面中也能看到「您的单位由 xx 托管」。看到这样的字样基本就表示中招了。</p>
<figure data-type="image" tabindex="6"><img src="https://chenhuaibo.xyz/post-images/1574352556255.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://chenhuaibo.xyz/post-images/1574352561865.png" alt="" loading="lazy"></figure>
<p>除此之外，你还可以在地址栏输入「chrome://policy」，在政策页面的 Chrome Policies 下正常应该是空白的，如果有内容，也表示你被托管了。</p>
<figure data-type="image" tabindex="8"><img src="https://chenhuaibo.xyz/post-images/1574352569124.png" alt="" loading="lazy"></figure>
<p>想要取消托管状态比较简单，只要删除掉相关的注册表文件就行了：<br>
Win + R 打开「运行」，输入「regedit」，就能开启注册表编辑器。按照以下路径找到并删除相关文件就行了。</p>
<blockquote>
<p>HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Google\Chrome\EnabledPlugins</p>
</blockquote>
<figure data-type="image" tabindex="9"><img src="https://chenhuaibo.xyz/post-images/1574352421577.png" alt="" loading="lazy"></figure>
<p>另外你还可以使用名为「Chrome policy remover」的 bat文件。但很多国外用户表示这个文件有些情况下可能会失灵，因此还是按照上面的步骤删除注册表文件更彻底一些。</p>
<figure data-type="image" tabindex="10"><img src="https://chenhuaibo.xyz/post-images/1574352436063.png" alt="" loading="lazy"></figure>
<p>目前这个托管问题似乎只出现在 Windows 平台上，macOS 和 Linux 目前似乎还没出现相关的问题；而且似乎只出现在了 Chrome 上，Firefox、Opera 等浏览器也没有出现。</p>
<p>回想这些年国产软件在隐私保护上的乱象，我还是希望你们能稍微拿出一点底线出来，尊重一下用户的权益，也尊重一下自己的尊严。</p>
<p></p>
<h6><p align="right">原文来自于爱否科技 有修改</p></h6>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java实例：宠物商店]]></title>
        <id>https://chenhuaibo.xyz/post/java-shi-li-chong-wu-shang-dian/</id>
        <link href="https://chenhuaibo.xyz/post/java-shi-li-chong-wu-shang-dian/">
        </link>
        <updated>2019-11-21T07:21:21.000Z</updated>
        <summary type="html"><![CDATA[<p>任务要求：<br>
1.设计一个“宠物商店”，在宠物商店中可以有多种宠物，数量由用户决定，可以根据宠物关键字的查找，获取相应的宠物信息，而宠物的相关信息可以根据需要自行设计。<br>
2.根据要求中提示的宠物信息可以自行设计，先简单设计宠物的名字、品种、颜色、年龄等属性。<br>
3.宠物的种类很多，如猫、狗等都属于宠物，所以宠物应该是一个标准；在宠物商店中，只要符合宠物标准的，应该都可以放进宠物商店中。<br>
4.宠物商店中因为要保存多种宠物，所以应该具有一个宠物的对象数组；因为宠物的数量由用户决定，所以在创建宠物商店时，需要分配好能够保存宠物的个数。</p>
]]></summary>
        <content type="html"><![CDATA[<p>任务要求：<br>
1.设计一个“宠物商店”，在宠物商店中可以有多种宠物，数量由用户决定，可以根据宠物关键字的查找，获取相应的宠物信息，而宠物的相关信息可以根据需要自行设计。<br>
2.根据要求中提示的宠物信息可以自行设计，先简单设计宠物的名字、品种、颜色、年龄等属性。<br>
3.宠物的种类很多，如猫、狗等都属于宠物，所以宠物应该是一个标准；在宠物商店中，只要符合宠物标准的，应该都可以放进宠物商店中。<br>
4.宠物商店中因为要保存多种宠物，所以应该具有一个宠物的对象数组；因为宠物的数量由用户决定，所以在创建宠物商店时，需要分配好能够保存宠物的个数。</p>
<!-- more -->
<p>宠物接口：</p>
<blockquote>
<p>package 宠物商店项目;<br>
public interface Pet {<br>
String getInfo();<br>
void printInfo();<br>
boolean searchPet(String s);<br>
}</p>
</blockquote>
<p>宠物猫：</p>
<blockquote>
<p>package 宠物商店项目;<br>
public class Cat implements Pet{<br>
private String name;<br>
private String type;<br>
private int age;<br>
private String color;<br>
Cat(){}<br>
Cat(String s,String t,int a,String c){<br>
name=s;<br>
type=t;<br>
age=a;<br>
color=c;<br>
}<br>
public String getInfo() {<br>
return name+type+color;<br>
}<br>
public void printInfo() {<br>
System.out.println(name+&quot;|&quot;+type+&quot;|&quot;+color);<br>
}<br>
public boolean searchPet(String s) {<br>
if(name.indexOf(s)&gt;=0||type.indexOf(s)&gt;=0||color.indexOf(s)&gt;=0) {<br>
return true;<br>
}<br>
return false;<br>
}<br>
}</p>
</blockquote>
<p>宠物狗：</p>
<blockquote>
<p>package 宠物商店项目;<br>
public class Dog implements Pet{<br>
private String name;<br>
private String type;<br>
private int age;<br>
private String color;<br>
Dog(){}<br>
Dog(String s,String t,int a,String c){<br>
name=s;<br>
type=t;<br>
age=a;<br>
color=c;<br>
}<br>
public String getInfo() {<br>
return name+type+color;<br>
}<br>
public void printInfo() {<br>
System.out.println(name+&quot;|&quot;+type+&quot;|&quot;+color);<br>
}<br>
public boolean searchPet(String s) {<br>
if(name.indexOf(s)&gt;=0||type.indexOf(s)&gt;=0||color.indexOf(s)&gt;=0) {<br>
return true;<br>
}<br>
return false;<br>
}<br>
}</p>
</blockquote>
<p>宠物商店：</p>
<blockquote>
<p>package 宠物商店项目;<br>
public class PetShop {<br>
Pet pets[]=new Pet[4];<br>
PetShop() {<br>
pets[0]=new Cat(&quot;小澳子&quot;,&quot;波斯猫&quot;,2,&quot;土色&quot;);<br>
pets[1]=new Cat(&quot;小黑&quot;,&quot;土猫&quot;,2,&quot;红色&quot;);<br>
pets[2]=new Dog(&quot;小黄狗&quot;,&quot;拉普拉多&quot;,4,&quot;白色&quot;);<br>
pets[3]=new Dog(&quot;小黄狗&quot;,&quot;德牧&quot;,2,&quot;黄色&quot;);<br>
}<br>
void searPet(String s) {<br>
System.out.println(&quot;当前搜索的信息是：&quot;+s);<br>
for(int i=0;i&lt;this.pets.length;i++) {<br>
if(pets[i].searchPet(s))<br>
pets[i].printInfo();<br>
}<br>
}<br>
public static void main(String[] args) {<br>
PetShop ps1=new PetShop();<br>
ps1.searPet(&quot;小澳子&quot;);<br>
}<br>
}</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChenHuaibo's Blog 正式上线]]></title>
        <id>https://chenhuaibo.xyz/post/chenhuaibos-blog-zheng-shi-shang-xian/</id>
        <link href="https://chenhuaibo.xyz/post/chenhuaibos-blog-zheng-shi-shang-xian/">
        </link>
        <updated>2019-11-20T16:04:06.000Z</updated>
        <content type="html"><![CDATA[<p>ChenHuaibo's Blog 正式上线</p>
]]></content>
    </entry>
</feed>